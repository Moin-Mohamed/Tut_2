#______PROBLEM 1_____

from numpy.fft import fft,ifft
import matplotlib.pyplot as plt
import numpy as np

def shift(x,a): #x is array, a is the shift
	v=x*0   #new array with same length as x but with zero elements
	v[a]=1  #changes the a'th element to a finite number
	vec=fft(v) #fourier transforms v
	vecx=fft(x) # fourier transforms x
	return np.real(ifft(vecx*vec)) #returns the real part of the inverse fourier transform

x=np.arange(-10,10,0.1)
sig=2
y=np.exp(-0.5*x**2/sig**2)
yshift=shift(y,y.size/2)

plt.plot(x,y)
plt.plot(x,yshift)
plt.show()



#______PROBLEM 2______

from numpy.fft import fft,ifft
import matplotlib.pyplot as plt
import numpy as np

def corr(x,y):
	assert(len(x)==len(y))
	xx=fft(x)
	yy=fft(y)
	ycon=np.con(yy)
	return np.real(ifft(xx*ycon))

x=np.arange(-10,10,0.1)
sig=2
y=np.exp(-0.5*x**2/sig**2)

corr2=corr(y,y)
plt.plot(x,corr2)
plt.show()



#______PROBLEM 3______

from numpy.fft import fft,ifft
import matplotlib.pyplot as plt
import numpy as np

#From Problem 1:

def shift(x,a): 
	v=x*0   
	v[a]=1  
	vec=fft(v) 
	vecx=fft(x) 
	return np.real(ifft(vecx*vec)) 

#From Problem 2:


def corr(x,y):
	assert(len(x)==len(y))
	xx=fft(x)
	yy=fft(y)
	ycon=np.con(yy)
	return np.real(ifft(xx*ycon))

x=np.arange(-10,10,0.1)
sig=2
y=np.exp(-0.5*x**2.sig**2)

corr2=corr(y,y)
yshift=shift(y,y.size/4)
shiftcorr=corr(yshift,yshift)
error=np.mean(np.abs(corr2-yshift))

print 'the mean difference between correlation is ' +repr(error)

plt.plot(x,corr2)
plt.plot(x,shiftcorr)
plt.show()
	


#______PROBLEM 4______

from numpy.fft import fft,ifft
import matplotlib.pyplot as plt
import numpy as np

def conv(x,y):
	x0=np.zeros(2*x.size) #Getting an array twice the size of x but with zeros
	y0=np.zeros(2*y.size) 
	x0[0:x.size]=x #Making the first half of the array have values of x and the rest zeros
	y0[0:y.size]=y
	xf=fft(x0)
	yf=fft(y0)
	w=np.real(ifft(xf*yf)
	return w[0:x.size]

if __name__=='__main__':
	x=np.arange(-10,10,0.1)
	sigma=2
	y=np.exp(-0.5*x**2/sigma**2)
	y=y/y.sum()
	yconv=conv(y,y)
	plt.plot(x,y)
	plt.plot(x,yconv)
	plt.show()


#______PROBLEM 5______

class Complex:
	def __init__(self,r=0,i=0):
		self.r=r
		self.i=i
	def __sub__(self,num):
		return Complex(self.r-num.r,self.i-num.i)
	def __mul__(self,num):
		return Complex(self.r*num.r-self.i*num.i,self.i*num.r+self.r*num.i)
	def __div__(self,num):
		return Complex((self.r*num.r+self.i*num.i)/(num.r**2+num.i**2),(self.i*num.r-self.r*num.i)/(num.r**2+num.i**2))

#SAMPLE CASES

num1=Complex(3,4)
num2=Complex(1,1)

subtraction=num1.__sub__(num2)
print repr(subtraction.r)+' '+repr(subtraction.i)+'i'

multiplication=num1.__mul__(num2)
print repr(multiplication.r)+' '+repr(multiplication.i)+'i'

division=num1.__div__(num2)
print repr(division.r)+' '+repr(division.i)+'i'




















